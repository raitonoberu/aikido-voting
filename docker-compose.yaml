version: "3.8"

services:
  web:
    container_name: webapp
    build: .
    depends_on:
      db:
        condition: service_healthy
    environment:
      GIN_MODE: release
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      SECRET: ${SECRET}
      ADMIN_EMAIL: ${ADMIN_EMAIL}
      ADMIN_PASSWORD: ${ADMIN_PASSWORD}
    ports:
      - "80:80"
      - "443:443"
    networks:
      - bridge
    restart: always
    cap_add:
      - NET_RAW
    volumes:
      - cache:/cache

  db:
    container_name: postgres
    image: docker.io/postgres:alpine
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: aikido-db
    expose:
      - "5432"
    networks:
      - bridge
    restart: always
    healthcheck:
      test: pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB
      interval: 10s
      timeout: 5s
      retries: 5
    cap_add:
      - NET_RAW
    volumes:
      - postgres:/var/lib/postgresql/data

  bot:
    container_name: bot
    build: bot
    depends_on:
      - web
    environment:
      ADMIN_EMAIL: ${ADMIN_EMAIL}
      ADMIN_PASSWORD: ${ADMIN_PASSWORD}
      VK_TOKEN: ${VK_TOKEN}
      VK_GROUPID: ${VK_GROUPID}
      TG_TOKEN: ${TG_TOKEN}
      TG_CHATID: ${TG_CHATID}
    restart: always
    cap_add:
      - NET_RAW

networks:
  bridge:
    driver: bridge

volumes:
  postgres:
  cache:
